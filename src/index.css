@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  font-family: 'Roboto', sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light;
  color: var(--color-text-light);
  background-color: var(--color-app-light);

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

html.dark, body.dark {
  color-scheme: dark;
  color: var(--color-text-dark);
  background-color: var(--color-app-dark);
}

a {
  font-weight: 500;
  color: var(--color-primary-light);
  text-decoration: inherit;
  transition: color 0.2s ease-in-out;
}
a:hover {
  color: var(--color-primary-darker-light);
}

/* Dark mode link styling */
html.dark a {
  color: var(--color-primary-dark);
}
html.dark a:hover {
  color: var(--color-primary-lighter-dark);
}


/* Body styling: ensures full height and allows #root to control content */
body {
  margin: 0;
  min-width: 320px;
  min-height: 100vh;
  /* Removed display: flex and place-items: center from body */
  /* This allows the #root element to manage its own layout */
}

/* Target the #root div where your React app mounts */
#root {
  display: flex; /* Make #root a flex container */
  flex-direction: column; /* Stack children vertically */
  min-height: 100vh; /* Ensure #root fills the entire viewport height */
  width: 100%; /* Ensure #root takes full width */
  /* Remove any explicit centering here, Layout.tsx will handle content centering */
  /* For example, Layout has 'container mx-auto p-4' for its main section */
}


/* Heading styling */
h1 {
  font-size: 3.2em;
  line-height: 1.1;
  font-weight: 700; /* Make headings bold */
}

/* Base button styling (for non-Tailwind buttons or as a fallback) */
button {
  border-radius: var(--borderRadius-lg);
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: var(--color-gray-200);
  color: var(--color-gray-800);
  cursor: pointer;
  transition: all 0.25s ease-in-out;
  box-shadow: var(--boxShadow-md);
}
button:hover {
  border-color: var(--color-primary-light);
  background-color: var(--color-gray-300);
  box-shadow: var(--boxShadow-lg);
}
button:focus,
button:focus-visible {
  outline: 4px auto var(--color-primary-light);
}

/* Dark mode button styling */
html.dark button {
  background-color: var(--color-gray-700);
  color: var(--color-gray-200);
}
html.dark button:hover {
  border-color: var(--color-primary-dark);
  background-color: var(--color-gray-600);
}